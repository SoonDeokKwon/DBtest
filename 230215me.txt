--게시판 테이블
CREATE TABLE board (
board_no number,
board_content varchar2(200)
);


INSERT INTO board VALUES (1, '1번 게시판');
INSERT INTO board VALUES (2, '2번 게시판');
INSERT INTO board VALUES (3, '3번 게시판');
INSERT INTO board VALUES (4, '4번 게시판');
INSERT INTO board VALUES (5, '5번 게시판');
INSERT INTO board VALUES (6, '6번 게시판');
INSERT INTO board VALUES (7, '7번 게시판');
INSERT INTO board VALUES (8, '8번 게시판');


SELECT *
FROM board;

--게시판 삭제
DELETE FROM board
WHERE board_content = '5번 게시판';

--게시판 삭제한 내용을 기준으로 번호 재정렬
UPDATE board
SET board_no = board_no - 1
WHERE board_no > 5;

--게시판 데이터 입력할 때 값을 부여하는 것이 아니라 앞에서 배운 내용을 토대로 게시판 번호를 "생성"해서 데이터 입력할 것.
INSERT INTO board (board_no)
VALUES ((
         SELECT MAX(board_no)
         FROM board
         ) + 1);

--교수님 풀이
--INSERT INTO board
--VALUES ((
--         SELECT COUNT(*)+1
--         FROM board
--         ),
--         (
--         SELECT COUNT(*)+1
--         FROM board
--         ) || '게시판'
--         );



--트랙젝션
--데이터I,D,U를 할 때 해당 데이터 변경, 소유권을 사용자에게 독점할 수 있는 권한

--INSERT 문장을 통한 Transaction

INSERT INTO departments
VALUES (70, 'Public Relations', 100,1700);

SELECT *
FROM departments;

COMMIT;

ROLLBACK;

SELECT *
FROM departments;


--다른 테이블로 ROW 복사
CREATE TABLE sales_reps
AS 
SELECT employee_id id, last_name name, salary, commission_pct
FROM employees;

SELECT *
FROM sales_reps;


--치환변수 활용
INSERT INTO departments (deaprtment_id ,department_name, location_id)
VALUES (&department_id, '&department_name', &location);

SELECT *
FROM departments;



--UPDATE 문장을 활용한 Transaction
UPDATE employees
SET salary = 7000;

SELECT *
FROM employees;

ROLLBACK;

UPDATE employees
SET salary = 7000
WHERE employee_id = 104;

ROLLBACK;

UPDATE employees
SET salary = salary*1.1
WHERE employee_id = 104;

UPDATE employees
SET salary = 6000
WHERE employee_id = 104;


--서브쿼리를 사용한 UPDATE
UPDATE employees
SET job_id = (
              SELECT job_id
              FROM employees
              WHERE employee_id =205),
     salary = (
               SELECT salary
               FROM employees
               WHERE employee_id = 205)
WHERE employee_id = 124;


UPDATE employees
SET department_id = 
                   (
                    SELECT department_id
                    FROM departments
                    WHERE department_name LIKE '%Public%')
WHERE employee_id = 206;



SELECT *
FROM employees;

ROLLBACK;


--DELETE
DELETE FORM departments
WHERE department_name = 'Finance';

DELETE FROM employees
WHERE deparmtnet_id = 
                      (
                      SELECT department _id
                      FROM departments
                      WHERE department_name, LIKE '%Public%');
                      
ROLLBACK;


--TABLE DELETE& TRUNCATE
-- TABLE에서 DELETE => 데이터만 삭제
SELECT *
FROM sales_reps;

DELETE FROM sales_reps;
ROLLBACK;


-- TABLE에서 TRUNCATE => 데이터와 데이터 보관하는 공간까지 삭제
TRUNCATE TABLE sales_reps;
ROLLBACK;

INSERT INTO sales_reps
SELECT employee_id, last_name, salary, commission_pct
FROM employees
WHERE job_id LIKE '%REP%';

SELECT *
FROM sales_reps;
COMMIT;


DELETE FROM sales_reps
WHERE id = 174;

SAVEPOINT sp1;

DELETE FROM sales_reps
WHERE id = 202;

ROLLBACK to sp1;

ROLLBACK;

SELECT table_name
FROM user_tables;

SELECT DISTINCT *
FROM user_objects;

SELECT *
FROM user_catalog;

DELETE FROM dept;

--TABLE 생성
CREATE TABLE dept(
dept_no number(2),
dname varchar2(4),
loc varchar2(13),
create_date DATE DEFAULT sysdate);

DELETE FROM dept;

DESC dept;

INSERT INTO dept(dept_no, dname,loc)
VALUES (1,'또치', '예담');



CREATE TABLE dept30
AS 
   SELECT employee_id, last_name, salary*12 AS "salary", hire_date
   FROM employees
   WHERE department_id = 50;

SELECT * FROM dept30;

DESC employees;

DESC dept30;

DROP TABLE dept;
DROP TABLE dept30;


--Column 추가 
ALTER TABLE dept30
ADD          (job VARCHAR2(20));


DESC dept30;


ALTER TABLE dept30
MODIFY      (job NUMBER);


INSERT INTO dept30
VALUES (1, '또치', 2000, SYSDATE, 123);

--Column 비우고 나서 바꿔줘야 함
ALTER TABLE dept30
MODIFY       (job VARCHAR2(40));

DELETE FROM dept30
WHERE employee_id = 1;

ALTER TABLE dept30
DROP COLUMN job;

DESC dept30;

ALTER TABLE dept30
SET UNUSED (hire_date);

SELECT *
FROM dept30;

ALTER TABLE dept30
DROP UNUSED COLUMNS;


--RENAME 

RENAME dept30 TO dept100;

SELECT *
FROM dept100;


COMMENT ON TABLE dept100
IS 'THIS IS DEPT100';

SELECT *
FROM ALL_col_comments
WHERE LOWER(table_name) = 'dept100';

COMMENT ON COLUMN dept100.employee_id
IS 'THIS IS EMPLOYEE_ID';

SELECT *
FROM dept100;

--TRUNCATE : 데이터, 데이터 공간 삭제
--DELETE -> 데이터 삭제 
--삭제한 데이터를 UNDO 파일에 보관 : '데이터', '데이터가 존재했던 장소 위치' 저장
--DELETE는 데이터만 삭제되었기 때문에 위치를 찾아가서 ROLLBACK 수행
--TRUNCATE는 데이터와 공간까지 다 지워졌기 때문에 ROLLBACK 불가
TRUNCATE TABLE dept100;
ROLLBACK;

DROP TABLE dept100;


--기본 키(PK) 기본값을 포함하는 테이블 생성
DROP TABLE board;

CREATE TABLE dept (
                    deptno NUMBER(2) PRIMARY KEY, --기본 키
                    dname VARCHAR2(14),
                    loc VARCHAR2(13),
                    create_date DATE DEFAULT SYSDATE --기본값을 가지는 열(column)
                    ); 

INSERT INTO dept(deptno, dname)
VALUES (10, '기획부');  --기본값을 가지는 열에 데이터 자동 입력

INSERT INTO dept
VALUES (20, '영업부', '서울', '23/02/15');

COMMIT;

SELECT *
FROM dept;


--여러가지 제약조건을 포함하는 테이블 생성
DROP TABLE emp;

CREATE TABLE emp(
empno NUMBER(6) PRIMARY KEY,  --기본키 제약조건
ename VARCHAR2(25) NOT NULL, --NOT NULL  제약조건
email VARCHAR2(50) CONSTRAINT emp_mail_nn NOT NULL
                   CONSTRAINT emp_mail_uk UNIQUE,
phone_no CHAR(11) NOT NULL,
job VARCHAR2(20),
salary NUMBER(8) CHECK (salary>2000),
deptno NUMBER(4) REFERENCES dept(deptno));




--CREATE TABLE emp(
----COLUMN LEVEL CONSTRAINT
--empno NUMBER(6) , 
--ename VARCHAR2(25) CONSTRAINT emp_ename_nn NOT NULL, 
--email VARCHAR2(50) CONSTRAINT emp_eamil_nn NOT NULL,
--phone_no CHAR(11) ,
--job VARCHAR2(20),
--salary NUMBER(8) ,
--deptno NUMBER(4) ,
----TABLE LEVEL CONSTARINT
--CONSTRAINT emp_empno_pk PRIMARY KEY (empno),
--CONSTRAINT emp_email_uk UNIQUE (email),
--CONSTRAINT emp_salary_ck CHECK(salary>2000),
--CONSTRAINT emp_deptno_fk FOREIGN KEY (deptno)
--REFERENCES dept(deptno)
--);



--제약조건 관련 딕셔너리 정보 보기
SELECT constraint_name, constraint_type, search_condition
FROM user_constraints
WHERE table_name  = 'EMP';

SELECT CC.column_name, C.constraint_name
FROM user_constraints C JOIN user_cons_columns CC
ON (C.constraint_name = CC.column_name)
WHERE C.table_name = 'EMP';


SELECT table_name, index_name
FROM user_indexs 
WHERE table_name IN ('DEPT', 'EMP');




--DML을 수행하며 제약조건 테스트하기
INSERT INTO emp
VALUES (1324, '또치', 'ddoChiKim@naver.com', '01023456789', '회사원', 3500, null);


INSERT INTO emp
VALUES (1323, '희동', 'heeeedong@naver.com', '01023456789', null, 7800, 20);


COMMIT;

SELECT *
FROM emp;


UPDATE emp 
SET deptno =10
WHERE empno = 1234;

COMMIT;

SELECT *
FROM emp;

ALTER TABLE emp
ADD CONSTRAINT emp_job_uk UNIQUE(job);

INSERT INTO emp
VALUES (1200, '길동', 'gildong@naver.com', '01023456789', '회사원', 5000, 20);


ALTER TABLE emp
MODIFY (salaty number NOT NULL);

INSERT INTO emp
VALUES (1200, '길동', 'gildong@naver.com', '01023456789', '회사원', 5000, 20);


ALTER TABLE emp
DROP CONSTRAINT emp_job_uk;


SELECT*
FROM emp;





